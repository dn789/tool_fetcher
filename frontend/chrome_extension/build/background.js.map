{"version":3,"file":"background.js","mappings":"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","sources":["webpack://chrome_extension_react/./src/components/utils/utils.js","webpack://chrome_extension_react/./node_modules/regenerator-runtime/runtime.js","webpack://chrome_extension_react/webpack/bootstrap","webpack://chrome_extension_react/webpack/runtime/compat get default export","webpack://chrome_extension_react/webpack/runtime/define property getters","webpack://chrome_extension_react/webpack/runtime/hasOwnProperty shorthand","webpack://chrome_extension_react/webpack/runtime/make namespace object","webpack://chrome_extension_react/./src/background.js"],"sourcesContent":["export function embedFile(fileURL) {\r\n  return (\r\n    <embed src={fileURL} style={{ height: \"100%\", width: \"100%\" }}></embed>\r\n  );\r\n}\r\n\r\nexport function getFileNameAndUrl(e) {\r\n  let fileName = e.target.value.split(\"\\\\\").pop();\r\n  let fileURL = URL.createObjectURL(e.target.files[0]);\r\n  if (fileName.endsWith(\".pdf\")) {\r\n    return [fileName, fileURL];\r\n  }\r\n}\r\n\r\nfunction replaceInText(element, pattern, replacement) {\r\n  for (let node of element.childNodes) {\r\n    switch (node.nodeType) {\r\n      case Node.ELEMENT_NODE:\r\n        replaceInText(node, pattern, replacement);\r\n        break;\r\n      case Node.TEXT_NODE:\r\n        let oldText = node.textContent;\r\n        let newText = oldText.replace(pattern, replacement);\r\n        if (oldText != newText) {\r\n          let newElement = document.createElement(\"span\");\r\n          newElement.innerHTML = newText;\r\n          node.parentNode.insertBefore(newElement, node);\r\n          node.parentNode.removeChild(node);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function findTerms(fileURL, fileType, serializedFile, setError) {\r\n  let contentType;\r\n  let body;\r\n  let paragraphs;\r\n  let searchWholeBody;\r\n  let termsHighlightColor;\r\n  // Sets up server request.\r\n  if (fileType == \"HTML\") {\r\n    const readLocalStorage = async (keys) => {\r\n      return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, function (result) {\r\n          resolve(result);\r\n        });\r\n      });\r\n    };\r\n    let result = await readLocalStorage([\r\n      \"searchWholeBody\",\r\n      \"termsHighlightColor\",\r\n    ]);\r\n    searchWholeBody = result.searchWholeBody;\r\n    termsHighlightColor = result.termsHighlightColor;\r\n    if (searchWholeBody) {\r\n      body = [document.body.innerText];\r\n      if (!body.length) {\r\n        return {\r\n          error: \"No text found on page.\",\r\n        };\r\n      }\r\n    } else {\r\n      paragraphs = Array.from(document.getElementsByTagName(\"p\"));\r\n      let parasInner = [];\r\n      paragraphs.forEach(function (item) {\r\n        parasInner.push(item.innerHTML);\r\n      });\r\n      body = parasInner;\r\n      if (!body.length) {\r\n        return {\r\n          error:\r\n            \"No text found in paragraph elements. Try searching all body text instead.\",\r\n        };\r\n      }\r\n    }\r\n    contentType = \"application/json\";\r\n  } else if (fileType == \"PDF\") {\r\n    if (!serializedFile) {\r\n      let objectURL = await fetch(fileURL);\r\n      let blob = await objectURL.blob();\r\n      body = await serializeBlob(blob);\r\n    } else {\r\n      body = serializedFile;\r\n    }\r\n    contentType = \"application/pdf\";\r\n  }\r\n  // Sends paragraph text, or PDF blob to server.\r\n\r\n  let resultsObj = await serverRequest(\r\n    fileType,\r\n    \"POST\",\r\n    body,\r\n    contentType,\r\n    setError\r\n  );\r\n  resultsObj[\"termResults\"].forEach((result) => {\r\n    result.key = result.term;\r\n  });\r\n\r\n  // For web pages, highlights terms on page.\r\n  if (fileType == \"HTML\") {\r\n    if (resultsObj[\"termResults\"].length) {\r\n      let pattern = [];\r\n      resultsObj[\"termResults\"].forEach((result) => {\r\n        let termPattern = result.term.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n        pattern.push(termPattern);\r\n      });\r\n      pattern = pattern.join(\"|\");\r\n      let styleString = `<span style=\"font-weight:bold; background-color:${termsHighlightColor}; color:black\">`;\r\n      pattern = \"\\\\b(\" + pattern + \")\\\\b\";\r\n      let re = new RegExp(pattern, \"gi\");\r\n      let elements;\r\n      if (searchWholeBody) {\r\n        elements = document.body.querySelectorAll(\":not(:last-child)\");\r\n      } else {\r\n        elements = paragraphs;\r\n      }\r\n      elements.forEach((element) => {\r\n        replaceInText(element, re, styleString + `$&</span>`);\r\n      });\r\n    }\r\n    return resultsObj[\"termResults\"];\r\n  }\r\n  // For PDFs, displays tagged PDF in tab.\r\n  else {\r\n    // Converts base64 response to PDF object URL and embeds it into\r\n    // <embed>.\r\n    let binary = atob(resultsObj[\"encodedPDF\"].replace(/\\s/g, \"\"));\r\n    let len = binary.length;\r\n    let buffer = new ArrayBuffer(len);\r\n    let view = new Uint8Array(buffer);\r\n    for (let i = 0; i < len; i++) {\r\n      view[i] = binary.charCodeAt(i);\r\n    }\r\n    let blob = new Blob([view], { type: \"application/pdf\" });\r\n    let objectURL = URL.createObjectURL(blob);\r\n    let embed = document.createElement(\"embed\");\r\n    embed.src = objectURL;\r\n    embed.style.cssText =\r\n      \"position: absolute; top: 0; left: 0; height: 100%; width: 100%;\";\r\n    document.body.appendChild(embed);\r\n    return resultsObj[\"termResults\"];\r\n  }\r\n}\r\n\r\nexport async function serverRequest(type, method, body, contentType, setError) {\r\n  let serverResponse;\r\n  const sendToBackground = () =>\r\n    new Promise((resolve) => {\r\n      chrome.runtime.sendMessage(\r\n        {\r\n          type: \"server_request_from_content\",\r\n          args: [type, method, body, contentType],\r\n        },\r\n        (response) => {\r\n          serverResponse = response.serverResponse;\r\n          if (serverResponse == \"error\") {\r\n            setError(\"fetch\");\r\n            return;\r\n          }\r\n          resolve();\r\n        }\r\n      );\r\n    });\r\n  await sendToBackground();\r\n  return serverResponse;\r\n}\r\n\r\nexport function formatExtractedText(text, lineBreaks) {\r\n  let replacePattern = new RegExp(`(\\n{1,})|(\\r{1,})`, \"g\");\r\n  let segments = text.split(replacePattern);\r\n  return segments.map((segment, index) => {\r\n    if (replacePattern.test(segment)) {\r\n      if (lineBreaks) {\r\n        return (\r\n          <span key={index}>\r\n            {\" \"}\r\n            <br />\r\n            <br />\r\n          </span>\r\n        );\r\n      } else {\r\n        return (\r\n          <span className=\"line-sep-icon\" key={index}>\r\n            &#9724;\r\n          </span>\r\n        );\r\n      }\r\n    } else {\r\n      return segment;\r\n    }\r\n  });\r\n}\r\n\r\nexport function listenForOutsideClicks(sideBarRef, menuRef, setIsOpen) {\r\n  let sidebar = sideBarRef.current;\r\n  if (!menuRef.current || !sideBarRef.current) return;\r\n  const clickListener = (evt) => {\r\n    if (!menuRef.current.contains(evt.target)) {\r\n      setIsOpen(false);\r\n      sidebar.removeEventListener(\"click\", clickListener);\r\n    }\r\n  };\r\n  sidebar.addEventListener(\"click\", clickListener);\r\n}\r\n\r\nexport async function serializeBlob(src) {\r\n  const wasBlob = src instanceof Blob;\r\n  const blob = wasBlob ? src : await new Response(src).blob();\r\n  const reader = new FileReader();\r\n  return new Promise((resolve) => {\r\n    reader.onload = () => resolve([reader.result, blob.type, wasBlob]);\r\n    reader.readAsDataURL(blob);\r\n  });\r\n}\r\n\r\nexport function deserializeBlob([base64, type, wasBlob]) {\r\n  const str = atob(base64.slice(base64.indexOf(\",\") + 1));\r\n  const len = str.length;\r\n  const arr = new Uint8Array(len);\r\n  for (let i = 0; i < len; i += 1) arr[i] = str.charCodeAt(i);\r\n  if (!wasBlob) {\r\n    type = base64\r\n      .match(/^data:(.+?);base64/)[1]\r\n      .replace(\r\n        /(boundary=)[^;]+/,\r\n        (_, p1) => p1 + String.fromCharCode(...arr.slice(2, arr.indexOf(13)))\r\n      );\r\n  }\r\n  return [arr, type];\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\r\nBackground script\r\n*/\r\nimport \"regenerator-runtime/runtime.js\";\r\nimport { deserializeBlob } from \"./components/utils/utils\";\r\n\r\nasync function serverRequest(type, method, body, contentType) {\r\n  if (!contentType) {\r\n    contentType = \"application/json\";\r\n  }\r\n  if (body && contentType == \"application/json\") {\r\n    body = JSON.stringify(body);\r\n  } else if (contentType == \"application/pdf\") {\r\n    body = new Blob(deserializeBlob(body));\r\n  }\r\n  let response;\r\n  try {\r\n    response = await fetch(\"http://127.0.0.1:5000/home\", {\r\n      headers: { \"Content-Type\": contentType, type: type },\r\n      method: method,\r\n      body: body,\r\n    });\r\n  } catch (error) {\r\n    // TypeError: Failed to fetch\r\n    return \"error\";\r\n  }\r\n  let responseObj = JSON.parse(await response.text());\r\n  return responseObj;\r\n}\r\n\r\nfunction executeContentScript(tabId, tabInfo, findTerms) {\r\n  if (tabInfo.type == \"HTML\" || !tabInfo.type || !findTerms) {\r\n    chrome.scripting.executeScript(\r\n      {\r\n        target: { tabId: tabId },\r\n        files: [\"content.js\"],\r\n      },\r\n      function () {\r\n        chrome.tabs.sendMessage(tabId, {\r\n          type: \"run\",\r\n          tabInfo: tabInfo,\r\n          findTerms: findTerms,\r\n        });\r\n      }\r\n    );\r\n  } else if (tabInfo.type == \"PDF\") {\r\n    chrome.tabs.create({ url: \"pdf.html\" }, function (tab) {\r\n      chrome.tabs.onUpdated.addListener(function checkPDFTab(\r\n        tabId,\r\n        changeInfo\r\n      ) {\r\n        if (tabId === tab.id && changeInfo.status === \"complete\") {\r\n          chrome.tabs.sendMessage(tabId, {\r\n            type: \"run\",\r\n            tabInfo: tabInfo,\r\n            findTerms: findTerms,\r\n          });\r\n          chrome.tabs.onUpdated.removeListener(checkPDFTab);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nchrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {\r\n  // Tells popup if tab is a chrome tab.\r\n  if (message.type == \"popup_request_tabType\") {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n      if (tabs[0].url.startsWith(\"chrome://\")) {\r\n        sendResponse({ tabType: \"chrome\" });\r\n      } else {\r\n        chrome.tabs.sendMessage(\r\n          tabs[0].id,\r\n          { type: \"checkContentScript\" },\r\n          function (response) {\r\n            if (response) {\r\n              sendResponse({\r\n                tabType: response.type,\r\n                errorMessage: response.errorMessage,\r\n              });\r\n            }\r\n            chrome.runtime.lastError;\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n  // If popup requests to find terms in current tab, run script to determine\r\n  // if tab is a web page or PDF.\r\n  else if (message.type == \"popup_request_run_in_tab\") {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n      chrome.tabs.sendMessage(\r\n        tabs[0].id,\r\n        { type: \"checkContentScript\" },\r\n        function (response) {\r\n          if (response) {\r\n            if (response.type != \"content_active\") {\r\n              sendResponse({\r\n                tabType: response.type,\r\n                errorMessage: response.errorMessage,\r\n              });\r\n            } else if (response.type == \"content_active\") {\r\n              chrome.tabs.sendMessage(\r\n                tabs[0].id,\r\n                { type: \"getTabInfo\" },\r\n                (response) => {\r\n                  let tabInfo = response;\r\n                  if (tabInfo.type == \"HTML\") {\r\n                    chrome.tabs.sendMessage(tabs[0].id, {\r\n                      type: \"run\",\r\n                      tabInfo: tabInfo,\r\n                      findTerms: true,\r\n                    });\r\n                  } else if (tabInfo.type == \"PDF\") {\r\n                    executeContentScript(tabs[0].id, tabInfo, true);\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          } else {\r\n            chrome.scripting.executeScript(\r\n              {\r\n                target: { tabId: tabs[0].id },\r\n                files: [\"getTabInfo.js\"],\r\n              },\r\n              () => {\r\n                chrome.tabs.sendMessage(\r\n                  tabs[0].id,\r\n                  { type: \"getTabInfo\" },\r\n                  (response) => {\r\n                    let tabInfo = response;\r\n                    executeContentScript(\r\n                      tabs[0].id,\r\n                      tabInfo,\r\n                      message.findTerms\r\n                    );\r\n                  }\r\n                );\r\n              }\r\n            );\r\n          }\r\n          chrome.runtime.lastError;\r\n        }\r\n      );\r\n    });\r\n  } else if (message.type == \"updateWatchlist_to_background\") {\r\n    chrome.tabs.query({}, function (tabs) {\r\n      tabs.forEach((tab) => {\r\n        if (sender.tab.id != tab.id) {\r\n          message.type = \"updateWatchlist_to_content\";\r\n          chrome.tabs.sendMessage(tab.id, message);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // Handles request from popup to run uploaded PDF (runs in new tab).\r\n  else if (message.type == \"popup_request_run_on_file\") {\r\n    if (message.fileType == \"PDF\") {\r\n      let tabInfo = {\r\n        type: \"PDF\",\r\n        url: null,\r\n        title: message.fileName,\r\n        serializedFile: message.serializedFile,\r\n      };\r\n      executeContentScript(null, tabInfo, true);\r\n    }\r\n  }\r\n  return true;\r\n});\r\n\r\nchrome.runtime.onMessage.addListener(async function (\r\n  message,\r\n  sender,\r\n  sendResponse\r\n) {\r\n  if (message.type == \"server_request_from_content\") {\r\n    let serverResponse = await serverRequest(...message.args);\r\n    sendResponse({ serverResponse: serverResponse });\r\n  }\r\n  return true;\r\n});\r\n"],"names":[],"sourceRoot":""}